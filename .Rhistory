# calculate denumerator
all_words<- data %>%
group_by(month) %>%
summarise(denominator=sum(exp(value*beta+value2*beta2+value3*beta3))) %>%
select(month, denominator)
# calculate the return value
ret<- learned_words %>%
left_join(all_words) %>%
summarise(nLLK=sum(log(numerator/denominator)))
return(-ret$nLLK)
}
parent_freq<- read.csv(paste(getwd(),"/in_files/log_freq.csv", sep = ""), as.is = T)
data<- read.csv("English (American)_PAC_freq_p.csv", as.is = T) %>%
mutate(value3=str_count(definition))
optim(c(0,0,0), loglike3)$value
optim(c(0,0), loglike_all)$value
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
loglike3 <- function(betas, control){
beta<- betas[1]
beta2<- betas[2]
beta3<- betas[3]
# calculate numerator
learned_words<- data %>%
filter(learned==1) %>%
mutate(numerator=exp(value*beta+value2*beta2+value3*beta3)) %>%
select(month, numerator)
# calculate denumerator
all_words<- data %>%
group_by(month) %>%
summarise(denominator=sum(exp(value*beta+value2*beta2+value3*beta3))) %>%
select(month, denominator)
# calculate the return value
ret<- learned_words %>%
left_join(all_words) %>%
summarise(nLLK=sum(log(numerator/denominator)))
return(-ret$nLLK)
}
parent_freq<- read.csv(paste(getwd(),"/in_files/log_freq.csv", sep = ""), as.is = T)
data<- read.csv("English (American)_PAC_freq_p.csv", as.is = T) %>%
mutate(value3=str_count(definition))
optim(c(0,0,0), loglike3)$value
data<- data %>% select(-value) %>% rename(value=value3)
optim(c(0,0), loglike_all)$value
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
loglike3 <- function(betas, control){
beta<- betas[1]
beta2<- betas[2]
beta3<- betas[3]
# calculate numerator
learned_words<- data %>%
filter(learned==1) %>%
mutate(numerator=exp(value*beta+value2*beta2+value3*beta3)) %>%
select(month, numerator)
# calculate denumerator
all_words<- data %>%
group_by(month) %>%
summarise(denominator=sum(exp(value*beta+value2*beta2+value3*beta3))) %>%
select(month, denominator)
# calculate the return value
ret<- learned_words %>%
left_join(all_words) %>%
summarise(nLLK=sum(log(numerator/denominator)))
return(-ret$nLLK)
}
parent_freq<- read.csv(paste(getwd(),"/in_files/log_freq.csv", sep = ""), as.is = T)
data<- read.csv("English (American)_PAC_freq_p.csv", as.is = T) %>%
mutate(value3=str_count(definition))
optim(c(0,0,0), loglike3)$value
data<- data %>% select(-value) %>% rename(value=value3)
data
optim(c(0,0), loglike_all)$value
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
loglike3 <- function(betas, control){
beta<- betas[1]
beta2<- betas[2]
beta3<- betas[3]
# calculate numerator
learned_words<- data %>%
filter(learned==1) %>%
mutate(numerator=exp(value*beta+value2*beta2+value3*beta3)) %>%
select(month, numerator)
# calculate denumerator
all_words<- data %>%
group_by(month) %>%
summarise(denominator=sum(exp(value*beta+value2*beta2+value3*beta3))) %>%
select(month, denominator)
# calculate the return value
ret<- learned_words %>%
left_join(all_words) %>%
summarise(nLLK=sum(log(numerator/denominator)))
return(-ret$nLLK)
}
parent_freq<- read.csv(paste(getwd(),"/in_files/log_freq.csv", sep = ""), as.is = T)
data<- read.csv("English (American)_PAC_freq_np.csv", as.is = T) %>%
mutate(value3=str_count(definition))
optim(c(0,0,0), loglike3)$value
data<- data %>% select(-value) %>% rename(value=value3)
data
optim(c(0,0), loglike_all)$value
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
loglike3 <- function(betas, control){
beta<- betas[1]
beta2<- betas[2]
beta3<- betas[3]
# calculate numerator
learned_words<- data %>%
filter(learned==1) %>%
mutate(numerator=exp(value*beta+value2*beta2+value3*beta3)) %>%
select(month, numerator)
# calculate denumerator
all_words<- data %>%
group_by(month) %>%
summarise(denominator=sum(exp(value*beta+value2*beta2+value3*beta3))) %>%
select(month, denominator)
# calculate the return value
ret<- learned_words %>%
left_join(all_words) %>%
summarise(nLLK=sum(log(numerator/denominator)))
return(-ret$nLLK)
}
parent_freq<- read.csv(paste(getwd(),"/in_files/log_freq.csv", sep = ""), as.is = T)
data<- read.csv("English (American)_PAC_freq_np.csv", as.is = T) %>%
mutate(value3=str_count(definition))
optim(c(0,0,0), loglike3)$value
data<- data %>% select(-value) %>% rename(value=value3)
data
optim(c(0,0), loglike00)$value
all_tests<-expand.grid(language = c("English",  "Mandarin"),
features = c("McRae", "W2V")) %>%
split(list(.$language, .$features))
for (test in all_tests){
print(paste(getwd(),"/",s$language,"_",s$features,".csv",sep = ""))
}
all_tests<-expand.grid(language = c("English",  "Mandarin"),
features = c("McRae", "W2V")) %>%
split(list(.$language, .$features))
for (test in all_tests){
print(paste(getwd(),"/",test$language,"_",test$features,".csv",sep = ""))
}
all_tests<-expand.grid(language = c("English (American)",  "Mandarin"),
features = c("McRae", "W2V")) %>%
split(list(.$language, .$features))
for (test in all_tests){
print(paste(getwd(),"/",test$language,"_",test$features,".csv",sep = ""))
}
all_tests<-expand.grid(language = c("English (American)",  "Mandarin"),
features = c("McRae", "W2V")) %>%
split(list(.$language, .$features))
for (test in all_tests){
print(paste(getwd(),"/out_files/",test$language,"_",test$features,".csv",sep = ""))
}
file.exists("1.csv")
#test_network(languages = c("English (American)"), features = c("PAC"))
file.exists("README.md")
#test_network(languages = c("English (American)"), features = c("PAC"))
file.exists("/Users/yuanbian/Downloads/WB_Project/README.md")
#test_network(languages = c("English (American)"), features = c("PAC"))
expand.grid(languages = c("a","b"),
features = c(1,2))
#test_network(languages = c("English (American)"), features = c("PAC"))
test_network(languages = c("English"), features = c("PAC"))
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
print(file.path())
}
}
}
test_network(languages = c("English"), features = c("PAC"))
test_network(languages = c("English"), features = c("assoc_PAC"))
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
print(file_path)
}
}
}
test_network(languages = c("English"), features = c("assoc_PAC"))
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
test_network(languages = c("English"), features = c("assoc_PAC"))
test_network(languages = c("English (American)"), features = c("assoc_PAC"))
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
import_all_library()
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
test_network(languages = c("English (American)"), features = c("assoc_PAC"))
#test_network(languages = c("English (American)"), features = c("assoc_PAC"))
languages=c("English (American)")
features=c("assoc_PAC")
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
import_all_library()
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
test_network(languages = c("English (American)"), features = c("assoc_PAC"))
# languages=c("English (American)")
# features=c("assoc_PAC")
#   all_tests<-expand.grid(languages = languages,
#   			features = features) %>%
#   	split(list(.$languages, .$features))
#
#   for (test in all_tests){
#     file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
#     if (file.exists(file_path)){
#       data<- read.csv(file_path, as.is = T)
#       print(optim(0, loglike1))
#       print(optim(0, loglike0))
#     }
#   }
test_network(languages = c("English (American)"), features = c("assoc_PAC120_p"))
# languages=c("English (American)")
# features=c("assoc_PAC")
#   all_tests<-expand.grid(languages = languages,
#   			features = features) %>%
#   	split(list(.$languages, .$features))
#
#   for (test in all_tests){
#     file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
#     if (file.exists(file_path)){
#       data<- read.csv(file_path, as.is = T)
#       print(optim(0, loglike1))
#       print(optim(0, loglike0))
#     }
#   }
test_network(languages = c("English (American)"), features = c("assoc_PAC120_p"))
# languages=c("English (American)")
# features=c("assoc_PAC")
#   all_tests<-expand.grid(languages = languages,
#   			features = features) %>%
#   	split(list(.$languages, .$features))
#
#   for (test in all_tests){
#     file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
#     if (file.exists(file_path)){
#       data<- read.csv(file_path, as.is = T)
#       print(optim(0, loglike1))
#       print(optim(0, loglike0))
#     }
#   }
test_network(languages = c("English"), features = c("assoc_PAC120_p"))
# languages=c("English (American)")
# features=c("assoc_PAC")
#   all_tests<-expand.grid(languages = languages,
#   			features = features) %>%
#   	split(list(.$languages, .$features))
#
#   for (test in all_tests){
#     file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
#     if (file.exists(file_path)){
#       data<- read.csv(file_path, as.is = T)
#       print(optim(0, loglike1))
#       print(optim(0, loglike0))
#     }
#   }
if (T){
a=1
}
if (T){print(a)}
if (T){
a=2
}
if (T){print(a)}
if (T){
a<<- 2
}
if (T){print(a)}
if (T){
a<<- 3
}
if (T){print(a)}
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
import_all_library()
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
import_all_library()
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
create_network_haspoly<- function(languages, features){
for (language in languages){
language<<- language
# age of acquisition data frame
aoa_frame<- make_aoa_dataframe(lang = language) %>%
trim_all_definition() %>%
trim_all_unilemma()
# list of lemmas of learnt words
lemma_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(uni_lemma)
# list of definitions of learnt words
def_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(definition)
# if ("assoc_PAC" %in% features){
#   assoc_pairs<<- make_assoc_pairs(lemma_list = lemma_list)
#   create_assoc_PAC()
# }
# if ("assoc_PAT" %in% features){
#   create_assoc_PAT()
# }
if ("McRae_PAC" %in% features){
McRae_pairs<<- make_McRae_pairs(words_list = lemma_list)
create_McRae_PAC(aoa_frame = aoa_frame, McRae_pairs = McRae_pairs)
}
# if ("McRae_PAT" %in% features){
#   create_McRae_PAT()
# }
# if ("phono_PAC" %in% features){
#
#   create_McRae_PAC()
# }
# if ("phono_PAT" %in% features){
#   create_phono_PAT()
# }
}
}
create_network_haspoly(languages = c("English (American)"), features = c("McRae_PAC"))
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
import_all_library()
test_network<- function(languages, features){
all_tests<-expand.grid(languages = languages,
features = features) %>%
split(list(.$languages, .$features))
for (test in all_tests){
file_path<-paste(getwd(),"/out_files/",test$languages,"_",test$features,".csv",sep = "")
if (file.exists(file_path)){
data<<- read.csv(file_path, as.is = T)
print(optim(0, loglike1))
print(optim(0, loglike0))
}
}
}
create_network_haspoly<- function(languages, features){
for (language in languages){
lang<<- language
# age of acquisition data frame
aoa_frame<- make_aoa_dataframe(lang = lang) %>%
trim_all_definition() %>%
trim_all_unilemma()
# list of lemmas of learnt words
lemma_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(uni_lemma)
# list of definitions of learnt words
def_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(definition)
# if ("assoc_PAC" %in% features){
#   assoc_pairs<<- make_assoc_pairs(lemma_list = lemma_list)
#   create_assoc_PAC()
# }
# if ("assoc_PAT" %in% features){
#   create_assoc_PAT()
# }
if ("McRae_PAC" %in% features){
McRae_pairs<<- make_McRae_pairs(words_list = lemma_list)
create_McRae_PAC(aoa_frame = aoa_frame, McRae_pairs = McRae_pairs)
}
# if ("McRae_PAT" %in% features){
#   create_McRae_PAT()
# }
# if ("phono_PAC" %in% features){
#
#   create_McRae_PAC()
# }
# if ("phono_PAT" %in% features){
#   create_phono_PAT()
# }
}
}
create_network_haspoly(languages = c("English (American)"), features = c("McRae_PAC"))
#create_network_haspoly<- function(languages, features){
languages = c("English (American)")
features = c("McRae_PAC")
for (language in languages){
lang<<- language
# age of acquisition data frame
aoa_frame<- make_aoa_dataframe(lang = lang) %>%
trim_all_definition() %>%
trim_all_unilemma()
# list of lemmas of learnt words
lemma_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(uni_lemma)
# list of definitions of learnt words
def_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(definition)
# if ("assoc_PAC" %in% features){
#   assoc_pairs<<- make_assoc_pairs(lemma_list = lemma_list)
#   create_assoc_PAC()
# }
# if ("assoc_PAT" %in% features){
#   create_assoc_PAT()
# }
if ("McRae_PAC" %in% features){
McRae_pairs<<- make_McRae_pairs(words_list = lemma_list)
create_McRae_PAC(aoa_frame = aoa_frame, McRae_pairs = McRae_pairs)
}
# if ("McRae_PAT" %in% features){
#   create_McRae_PAT()
# }
# if ("phono_PAC" %in% features){
#
#   create_McRae_PAC()
# }
# if ("phono_PAT" %in% features){
#   create_phono_PAT()
# }
}
#create_network_haspoly<- function(languages, features){
languages = c("English (American)")
features = c("McRae_PAC")
#  for (language in languages){
lang<<- languages[1]
# age of acquisition data frame
aoa_frame<- make_aoa_dataframe(lang = lang) %>%
trim_all_definition() %>%
trim_all_unilemma()
# list of lemmas of learnt words
lemma_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(uni_lemma)
# list of definitions of learnt words
def_list<- aoa_frame %>%
filter(month==month[1]) %>%
select(definition)
# if ("assoc_PAC" %in% features){
#   assoc_pairs<<- make_assoc_pairs(lemma_list = lemma_list)
#   create_assoc_PAC()
# }
# if ("assoc_PAT" %in% features){
#   create_assoc_PAT()
# }
if ("McRae_PAC" %in% features){
McRae_pairs<<- make_McRae_pairs(words_list = lemma_list)
create_McRae_PAC(aoa_frame = aoa_frame, McRae_pairs = McRae_pairs)
}
